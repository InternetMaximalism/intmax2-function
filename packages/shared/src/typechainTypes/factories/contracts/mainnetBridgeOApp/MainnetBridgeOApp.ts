/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export type OriginStruct = {
  srcEid: BigNumberish;
  sender: BytesLike;
  nonce: BigNumberish;
};

export type OriginStructOutput = [
  srcEid: bigint,
  sender: string,
  nonce: bigint
] & { srcEid: bigint; sender: string; nonce: bigint };

export interface MainnetBridgeOAppInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "allowInitializePath"
      | "clearMessage"
      | "endpoint"
      | "hasStoredPayload"
      | "isComposeMsgSender"
      | "lzReceive"
      | "manualRetry"
      | "nextNonce"
      | "oAppVersion"
      | "owner"
      | "peers"
      | "renounceOwnership"
      | "setDelegate"
      | "setPeer"
      | "transferOwnership"
      | "withdrawTokens"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BridgeFulfilled"
      | "OwnershipTransferred"
      | "PeerSet"
      | "TokensWithdrawn"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "allowInitializePath",
    values: [OriginStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "clearMessage",
    values: [OriginStruct, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "endpoint", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "hasStoredPayload",
    values: [BigNumberish, BytesLike, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isComposeMsgSender",
    values: [OriginStruct, BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lzReceive",
    values: [OriginStruct, BytesLike, BytesLike, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "manualRetry",
    values: [OriginStruct, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "nextNonce",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "oAppVersion",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "peers", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDelegate",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPeer",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTokens",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "allowInitializePath",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "clearMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endpoint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasStoredPayload",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isComposeMsgSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lzReceive", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "manualRetry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nextNonce", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "oAppVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "peers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDelegate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPeer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawTokens",
    data: BytesLike
  ): Result;
}

export namespace BridgeFulfilledEvent {
  export type InputTuple = [
    srcUser: AddressLike,
    recipient: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    srcUser: string,
    recipient: string,
    amount: bigint
  ];
  export interface OutputObject {
    srcUser: string;
    recipient: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PeerSetEvent {
  export type InputTuple = [eid: BigNumberish, peer: BytesLike];
  export type OutputTuple = [eid: bigint, peer: string];
  export interface OutputObject {
    eid: bigint;
    peer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensWithdrawnEvent {
  export type InputTuple = [to: AddressLike, amount: BigNumberish];
  export type OutputTuple = [to: string, amount: bigint];
  export interface OutputObject {
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MainnetBridgeOApp extends BaseContract {
  connect(runner?: ContractRunner | null): MainnetBridgeOApp;
  waitForDeployment(): Promise<this>;

  interface: MainnetBridgeOAppInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  allowInitializePath: TypedContractMethod<
    [origin: OriginStruct],
    [boolean],
    "view"
  >;

  clearMessage: TypedContractMethod<
    [_origin: OriginStruct, _guid: BytesLike, _message: BytesLike],
    [void],
    "nonpayable"
  >;

  endpoint: TypedContractMethod<[], [string], "view">;

  hasStoredPayload: TypedContractMethod<
    [
      srcEid: BigNumberish,
      sender: BytesLike,
      nonce: BigNumberish,
      guid: BytesLike,
      message: BytesLike
    ],
    [boolean],
    "view"
  >;

  isComposeMsgSender: TypedContractMethod<
    [arg0: OriginStruct, arg1: BytesLike, _sender: AddressLike],
    [boolean],
    "view"
  >;

  lzReceive: TypedContractMethod<
    [
      _origin: OriginStruct,
      _guid: BytesLike,
      _message: BytesLike,
      _executor: AddressLike,
      _extraData: BytesLike
    ],
    [void],
    "payable"
  >;

  manualRetry: TypedContractMethod<
    [
      _origin: OriginStruct,
      _guid: BytesLike,
      _message: BytesLike,
      _extraData: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  nextNonce: TypedContractMethod<
    [arg0: BigNumberish, arg1: BytesLike],
    [bigint],
    "view"
  >;

  oAppVersion: TypedContractMethod<
    [],
    [[bigint, bigint] & { senderVersion: bigint; receiverVersion: bigint }],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  peers: TypedContractMethod<[eid: BigNumberish], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setDelegate: TypedContractMethod<
    [_delegate: AddressLike],
    [void],
    "nonpayable"
  >;

  setPeer: TypedContractMethod<
    [_eid: BigNumberish, _peer: BytesLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  withdrawTokens: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "allowInitializePath"
  ): TypedContractMethod<[origin: OriginStruct], [boolean], "view">;
  getFunction(
    nameOrSignature: "clearMessage"
  ): TypedContractMethod<
    [_origin: OriginStruct, _guid: BytesLike, _message: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "endpoint"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "hasStoredPayload"
  ): TypedContractMethod<
    [
      srcEid: BigNumberish,
      sender: BytesLike,
      nonce: BigNumberish,
      guid: BytesLike,
      message: BytesLike
    ],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isComposeMsgSender"
  ): TypedContractMethod<
    [arg0: OriginStruct, arg1: BytesLike, _sender: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "lzReceive"
  ): TypedContractMethod<
    [
      _origin: OriginStruct,
      _guid: BytesLike,
      _message: BytesLike,
      _executor: AddressLike,
      _extraData: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "manualRetry"
  ): TypedContractMethod<
    [
      _origin: OriginStruct,
      _guid: BytesLike,
      _message: BytesLike,
      _extraData: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "nextNonce"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BytesLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "oAppVersion"
  ): TypedContractMethod<
    [],
    [[bigint, bigint] & { senderVersion: bigint; receiverVersion: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "peers"
  ): TypedContractMethod<[eid: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDelegate"
  ): TypedContractMethod<[_delegate: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPeer"
  ): TypedContractMethod<
    [_eid: BigNumberish, _peer: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawTokens"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "BridgeFulfilled"
  ): TypedContractEvent<
    BridgeFulfilledEvent.InputTuple,
    BridgeFulfilledEvent.OutputTuple,
    BridgeFulfilledEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PeerSet"
  ): TypedContractEvent<
    PeerSetEvent.InputTuple,
    PeerSetEvent.OutputTuple,
    PeerSetEvent.OutputObject
  >;
  getEvent(
    key: "TokensWithdrawn"
  ): TypedContractEvent<
    TokensWithdrawnEvent.InputTuple,
    TokensWithdrawnEvent.OutputTuple,
    TokensWithdrawnEvent.OutputObject
  >;

  filters: {
    "BridgeFulfilled(address,address,uint256)": TypedContractEvent<
      BridgeFulfilledEvent.InputTuple,
      BridgeFulfilledEvent.OutputTuple,
      BridgeFulfilledEvent.OutputObject
    >;
    BridgeFulfilled: TypedContractEvent<
      BridgeFulfilledEvent.InputTuple,
      BridgeFulfilledEvent.OutputTuple,
      BridgeFulfilledEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PeerSet(uint32,bytes32)": TypedContractEvent<
      PeerSetEvent.InputTuple,
      PeerSetEvent.OutputTuple,
      PeerSetEvent.OutputObject
    >;
    PeerSet: TypedContractEvent<
      PeerSetEvent.InputTuple,
      PeerSetEvent.OutputTuple,
      PeerSetEvent.OutputObject
    >;

    "TokensWithdrawn(address,uint256)": TypedContractEvent<
      TokensWithdrawnEvent.InputTuple,
      TokensWithdrawnEvent.OutputTuple,
      TokensWithdrawnEvent.OutputObject
    >;
    TokensWithdrawn: TypedContractEvent<
      TokensWithdrawnEvent.InputTuple,
      TokensWithdrawnEvent.OutputTuple,
      TokensWithdrawnEvent.OutputObject
    >;
  };
}
