/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { ContractDeployTransaction, ContractRunner, Signer } from "ethers";
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  MockL1ScrollMessenger,
  MockL1ScrollMessengerInterface,
} from "../../../../contracts/test/MockL1ScrollMessanger.sol/MockL1ScrollMessenger";

const _abi = [
  {
    inputs: [],
    name: "ErrorZeroAddress",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "messageHash",
        type: "bytes32",
      },
    ],
    name: "FailedRelayedMessage",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "messageHash",
        type: "bytes32",
      },
    ],
    name: "RelayedMessage",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "messageNonce",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "gasLimit",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "message",
        type: "bytes",
      },
    ],
    name: "SentMessage",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "oldMaxReplayTimes",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "newMaxReplayTimes",
        type: "uint256",
      },
    ],
    name: "UpdateMaxReplayTimes",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "messageNonce",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "message",
        type: "bytes",
      },
    ],
    name: "dropMessage",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_from",
        type: "address",
      },
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_nonce",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "_message",
        type: "bytes",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "batchIndex",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "merkleProof",
            type: "bytes",
          },
        ],
        internalType: "struct IL1ScrollMessenger.L2MessageProof",
        name: "_proof",
        type: "tuple",
      },
    ],
    name: "relayMessageWithProof",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_from",
        type: "address",
      },
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_messageNonce",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "_message",
        type: "bytes",
      },
      {
        internalType: "uint32",
        name: "_newGasLimit",
        type: "uint32",
      },
      {
        internalType: "address",
        name: "_refundAddress",
        type: "address",
      },
    ],
    name: "replayMessage",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "_message",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "_gasLimit",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "refundAddress",
        type: "address",
      },
    ],
    name: "sendMessage",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "_message",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "_gasLimit",
        type: "uint256",
      },
    ],
    name: "sendMessage",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "xDomainMessageSender",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b506110548061001f6000396000f3fe6080604052600436106100555760003560e01c806329907acd1461005a57806355004105146100835780635f7b15771461009f5780636e296e45146100bb578063b2267a7b146100e6578063c311b6fc14610102575b600080fd5b34801561006657600080fd5b50610081600480360381019061007c9190610836565b61012b565b005b61009d60048036038101906100989190610909565b610132565b005b6100b960048036038101906100b49190610a27565b61014e565b005b3480156100c757600080fd5b506100d061020b565b6040516100dd9190610ad0565b60405180910390f35b61010060048036038101906100fb9190610aeb565b61022f565b005b34801561010e57600080fd5b5061012960048036038101906101249190610be4565b6102fb565b005b5050505050565b6101458686858563ffffffff16336104fe565b50505050505050565b61019f868686868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505085336104fe565b8073ffffffffffffffffffffffffffffffffffffffff166108fc86662386f26fc10000346101cd9190610cd8565b6101d79190610cd8565b9081150290604051600060405180830381858888f19350505050158015610202573d6000803e3d6000fd5b50505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b3483662386f26fc100006102439190610d0c565b1115610284576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027b90610d9d565b60405180910390fd5b61029184848484336104fe565b3373ffffffffffffffffffffffffffffffffffffffff166108fc84662386f26fc10000346102bf9190610cd8565b6102c99190610cd8565b9081150290604051600060405180830381858888f193505050501580156102f4573d6000803e3d6000fd5b5050505050565b600061030a87878787876105a5565b8051906020012090506001600082815260200190815260200160002060009054906101000a900460ff1615610374576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161036b90610e2f565b60405180910390fd5b866000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008673ffffffffffffffffffffffffffffffffffffffff1686856040516103dc9190610ec0565b60006040518083038185875af1925050503d8060008114610419576040519150601f19603f3d011682016040523d82523d6000602084013e61041e565b606091505b5050905060008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080156104c657600180600084815260200190815260200160002060006101000a81548160ff021916908315150217905550817f4641df4a962071e12719d8c8c8e5ac7fc4d97b927346a3d7a335b1f7517e133c60405160405180910390a26104f4565b817f99d0e048484baa1b1540b1367cb128acd7ab2946d1ed91ec10e3c85e4bf51b8f60405160405180910390a25b5050505050505050565b600061050f338787600254886105a5565b8051906020012090508573ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f104371f3b442861a2a7b82a070afbbaab748bb13757bf47769e170e37809ec1e87600254878960405161057d9493929190610f30565b60405180910390a36002600081548092919061059890610f7c565b9190505550505050505050565b606085858585856040516024016105c0959493929190610fc4565b6040516020818303038152906040527f8ef1332e000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905095945050505050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006106878261065c565b9050919050565b6106978161067c565b81146106a257600080fd5b50565b6000813590506106b48161068e565b92915050565b6000819050919050565b6106cd816106ba565b81146106d857600080fd5b50565b6000813590506106ea816106c4565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610743826106fa565b810181811067ffffffffffffffff821117156107625761076161070b565b5b80604052505050565b6000610775610648565b9050610781828261073a565b919050565b600067ffffffffffffffff8211156107a1576107a061070b565b5b6107aa826106fa565b9050602081019050919050565b82818337600083830152505050565b60006107d96107d484610786565b61076b565b9050828152602081018484840111156107f5576107f46106f5565b5b6108008482856107b7565b509392505050565b600082601f83011261081d5761081c6106f0565b5b813561082d8482602086016107c6565b91505092915050565b600080600080600060a0868803121561085257610851610652565b5b6000610860888289016106a5565b9550506020610871888289016106a5565b9450506040610882888289016106db565b9350506060610893888289016106db565b925050608086013567ffffffffffffffff8111156108b4576108b3610657565b5b6108c088828901610808565b9150509295509295909350565b600063ffffffff82169050919050565b6108e6816108cd565b81146108f157600080fd5b50565b600081359050610903816108dd565b92915050565b600080600080600080600060e0888a03121561092857610927610652565b5b60006109368a828b016106a5565b97505060206109478a828b016106a5565b96505060406109588a828b016106db565b95505060606109698a828b016106db565b945050608088013567ffffffffffffffff81111561098a57610989610657565b5b6109968a828b01610808565b93505060a06109a78a828b016108f4565b92505060c06109b88a828b016106a5565b91505092959891949750929550565b600080fd5b600080fd5b60008083601f8401126109e7576109e66106f0565b5b8235905067ffffffffffffffff811115610a0457610a036109c7565b5b602083019150836001820283011115610a2057610a1f6109cc565b5b9250929050565b60008060008060008060a08789031215610a4457610a43610652565b5b6000610a5289828a016106a5565b9650506020610a6389828a016106db565b955050604087013567ffffffffffffffff811115610a8457610a83610657565b5b610a9089828a016109d1565b94509450506060610aa389828a016106db565b9250506080610ab489828a016106a5565b9150509295509295509295565b610aca8161067c565b82525050565b6000602082019050610ae56000830184610ac1565b92915050565b60008060008060808587031215610b0557610b04610652565b5b6000610b13878288016106a5565b9450506020610b24878288016106db565b935050604085013567ffffffffffffffff811115610b4557610b44610657565b5b610b5187828801610808565b9250506060610b62878288016106db565b91505092959194509250565b600080fd5b600080fd5b600060408284031215610b8e57610b8d610b6e565b5b610b98604061076b565b90506000610ba8848285016106db565b600083015250602082013567ffffffffffffffff811115610bcc57610bcb610b73565b5b610bd884828501610808565b60208301525092915050565b60008060008060008060c08789031215610c0157610c00610652565b5b6000610c0f89828a016106a5565b9650506020610c2089828a016106a5565b9550506040610c3189828a016106db565b9450506060610c4289828a016106db565b935050608087013567ffffffffffffffff811115610c6357610c62610657565b5b610c6f89828a01610808565b92505060a087013567ffffffffffffffff811115610c9057610c8f610657565b5b610c9c89828a01610b78565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610ce3826106ba565b9150610cee836106ba565b9250828203905081811115610d0657610d05610ca9565b5b92915050565b6000610d17826106ba565b9150610d22836106ba565b9250828201905080821115610d3a57610d39610ca9565b5b92915050565b600082825260208201905092915050565b7f696e73756666696369656e74206d73672e76616c756500000000000000000000600082015250565b6000610d87601683610d40565b9150610d9282610d51565b602082019050919050565b60006020820190508181036000830152610db681610d7a565b9050919050565b7f4d6573736167652077617320616c7265616479207375636365737366756c6c7960008201527f2065786563757465640000000000000000000000000000000000000000000000602082015250565b6000610e19602983610d40565b9150610e2482610dbd565b604082019050919050565b60006020820190508181036000830152610e4881610e0c565b9050919050565b600081519050919050565b600081905092915050565b60005b83811015610e83578082015181840152602081019050610e68565b60008484015250505050565b6000610e9a82610e4f565b610ea48185610e5a565b9350610eb4818560208601610e65565b80840191505092915050565b6000610ecc8284610e8f565b915081905092915050565b610ee0816106ba565b82525050565b600082825260208201905092915050565b6000610f0282610e4f565b610f0c8185610ee6565b9350610f1c818560208601610e65565b610f25816106fa565b840191505092915050565b6000608082019050610f456000830187610ed7565b610f526020830186610ed7565b610f5f6040830185610ed7565b8181036060830152610f718184610ef7565b905095945050505050565b6000610f87826106ba565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610fb957610fb8610ca9565b5b600182019050919050565b600060a082019050610fd96000830188610ac1565b610fe66020830187610ac1565b610ff36040830186610ed7565b6110006060830185610ed7565b81810360808301526110128184610ef7565b9050969550505050505056fea26469706673582212205bb83a8bea1930b996d7d094b166df5080dd1c4cc928f7741bb3e59e7de1b67364736f6c634300081b0033";

type MockL1ScrollMessengerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockL1ScrollMessengerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockL1ScrollMessenger__factory extends ContractFactory {
  constructor(...args: MockL1ScrollMessengerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      MockL1ScrollMessenger & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): MockL1ScrollMessenger__factory {
    return super.connect(runner) as MockL1ScrollMessenger__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockL1ScrollMessengerInterface {
    return new Interface(_abi) as MockL1ScrollMessengerInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MockL1ScrollMessenger {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as MockL1ScrollMessenger;
  }
}
