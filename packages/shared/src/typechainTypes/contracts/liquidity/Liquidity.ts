/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  AddressLike,
  BaseContract,
  BigNumberish,
  BytesLike,
  ContractMethod,
  ContractRunner,
  EventFragment,
  FunctionFragment,
  Interface,
  Listener,
  Result,
} from "ethers";
import type {
  TypedContractEvent,
  TypedContractMethod,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedLogDescription,
} from "../../common";

export declare namespace WithdrawalLib {
  export type WithdrawalStruct = {
    recipient: AddressLike;
    tokenIndex: BigNumberish;
    amount: BigNumberish;
    nullifier: BytesLike;
  };

  export type WithdrawalStructOutput = [
    recipient: string,
    tokenIndex: bigint,
    amount: bigint,
    nullifier: string
  ] & {
    recipient: string;
    tokenIndex: bigint;
    amount: bigint;
    nullifier: string;
  };
}

export declare namespace DepositLib {
  export type DepositStruct = {
    recipientSaltHash: BytesLike;
    tokenIndex: BigNumberish;
    amount: BigNumberish;
  };

  export type DepositStructOutput = [
    recipientSaltHash: string,
    tokenIndex: bigint,
    amount: bigint
  ] & { recipientSaltHash: string; tokenIndex: bigint; amount: bigint };
}

export declare namespace DepositQueueLib {
  export type DepositDataStruct = {
    depositHash: BytesLike;
    sender: AddressLike;
    isRejected: boolean;
  };

  export type DepositDataStructOutput = [
    depositHash: string,
    sender: string,
    isRejected: boolean
  ] & { depositHash: string; sender: string; isRejected: boolean };
}

export declare namespace ITokenData {
  export type TokenInfoStruct = {
    tokenType: BigNumberish;
    tokenAddress: AddressLike;
    tokenId: BigNumberish;
  };

  export type TokenInfoStructOutput = [
    tokenType: bigint,
    tokenAddress: string,
    tokenId: bigint
  ] & { tokenType: bigint; tokenAddress: string; tokenId: bigint };
}

export interface LiquidityInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ANALYZER"
      | "DEFAULT_ADMIN_ROLE"
      | "UPGRADE_INTERFACE_VERSION"
      | "analyzeAndRelayDeposits"
      | "cancelDeposit"
      | "claimWithdrawals"
      | "claimableWithdrawals"
      | "depositERC1155"
      | "depositERC20"
      | "depositERC721"
      | "depositNativeToken"
      | "getDepositData"
      | "getDepositDataBatch"
      | "getDepositDataHash"
      | "getLastDepositId"
      | "getLastRelayedDepositId"
      | "getNativeTokenIndex"
      | "getRoleAdmin"
      | "getTokenIndex"
      | "getTokenInfo"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "isDepositValid"
      | "onERC1155Received"
      | "processWithdrawals"
      | "proxiableUUID"
      | "renounceRole"
      | "revokeRole"
      | "supportsInterface"
      | "upgradeToAndCall"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ClaimedWithdrawal"
      | "DepositCanceled"
      | "Deposited"
      | "DepositsAnalyzedAndRelayed"
      | "DirectWithdrawalFailed"
      | "DirectWithdrawalSuccessed"
      | "Initialized"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "Upgraded"
      | "WithdrawalClaimable"
  ): EventFragment;

  encodeFunctionData(functionFragment: "ANALYZER", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "analyzeAndRelayDeposits",
    values: [BigNumberish, BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelDeposit",
    values: [BigNumberish, DepositLib.DepositStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "claimWithdrawals",
    values: [WithdrawalLib.WithdrawalStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimableWithdrawals",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "depositERC1155",
    values: [AddressLike, BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositERC20",
    values: [AddressLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositERC721",
    values: [AddressLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositNativeToken",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDepositData",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDepositDataBatch",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getDepositDataHash",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLastDepositId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLastRelayedDepositId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNativeTokenIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenIndex",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isDepositValid",
    values: [BigNumberish, BytesLike, BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "processWithdrawals",
    values: [WithdrawalLib.WithdrawalStruct[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "ANALYZER", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "analyzeAndRelayDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimWithdrawals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimableWithdrawals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositERC1155",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositERC721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositNativeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDepositData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDepositDataBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDepositDataHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastDepositId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastRelayedDepositId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNativeTokenIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isDepositValid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processWithdrawals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
}

export namespace ClaimedWithdrawalEvent {
  export type InputTuple = [recipient: AddressLike, withdrawalHash: BytesLike];
  export type OutputTuple = [recipient: string, withdrawalHash: string];
  export interface OutputObject {
    recipient: string;
    withdrawalHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositCanceledEvent {
  export type InputTuple = [depositId: BigNumberish];
  export type OutputTuple = [depositId: bigint];
  export interface OutputObject {
    depositId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositedEvent {
  export type InputTuple = [
    depositId: BigNumberish,
    sender: AddressLike,
    recipientSaltHash: BytesLike,
    tokenIndex: BigNumberish,
    amount: BigNumberish,
    depositedAt: BigNumberish
  ];
  export type OutputTuple = [
    depositId: bigint,
    sender: string,
    recipientSaltHash: string,
    tokenIndex: bigint,
    amount: bigint,
    depositedAt: bigint
  ];
  export interface OutputObject {
    depositId: bigint;
    sender: string;
    recipientSaltHash: string;
    tokenIndex: bigint;
    amount: bigint;
    depositedAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositsAnalyzedAndRelayedEvent {
  export type InputTuple = [
    upToDepositId: BigNumberish,
    rejectedIndices: BigNumberish[],
    gasLimit: BigNumberish,
    message: BytesLike
  ];
  export type OutputTuple = [
    upToDepositId: bigint,
    rejectedIndices: bigint[],
    gasLimit: bigint,
    message: string
  ];
  export interface OutputObject {
    upToDepositId: bigint;
    rejectedIndices: bigint[];
    gasLimit: bigint;
    message: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DirectWithdrawalFailedEvent {
  export type InputTuple = [
    withdrawalHash: BytesLike,
    withdrawal: WithdrawalLib.WithdrawalStruct
  ];
  export type OutputTuple = [
    withdrawalHash: string,
    withdrawal: WithdrawalLib.WithdrawalStructOutput
  ];
  export interface OutputObject {
    withdrawalHash: string;
    withdrawal: WithdrawalLib.WithdrawalStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DirectWithdrawalSuccessedEvent {
  export type InputTuple = [withdrawalHash: BytesLike, recipient: AddressLike];
  export type OutputTuple = [withdrawalHash: string, recipient: string];
  export interface OutputObject {
    withdrawalHash: string;
    recipient: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawalClaimableEvent {
  export type InputTuple = [withdrawalHash: BytesLike];
  export type OutputTuple = [withdrawalHash: string];
  export interface OutputObject {
    withdrawalHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Liquidity extends BaseContract {
  connect(runner?: ContractRunner | null): Liquidity;
  waitForDeployment(): Promise<this>;

  interface: LiquidityInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ANALYZER: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  UPGRADE_INTERFACE_VERSION: TypedContractMethod<[], [string], "view">;

  analyzeAndRelayDeposits: TypedContractMethod<
    [
      upToDepositId: BigNumberish,
      rejectDepositIds: BigNumberish[],
      gasLimit: BigNumberish
    ],
    [void],
    "payable"
  >;

  cancelDeposit: TypedContractMethod<
    [depositId: BigNumberish, deposit: DepositLib.DepositStruct],
    [void],
    "nonpayable"
  >;

  claimWithdrawals: TypedContractMethod<
    [withdrawals: WithdrawalLib.WithdrawalStruct[]],
    [void],
    "nonpayable"
  >;

  claimableWithdrawals: TypedContractMethod<
    [arg0: BytesLike],
    [bigint],
    "view"
  >;

  depositERC1155: TypedContractMethod<
    [
      tokenAddress: AddressLike,
      recipientSaltHash: BytesLike,
      tokenId: BigNumberish,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  depositERC20: TypedContractMethod<
    [
      tokenAddress: AddressLike,
      recipientSaltHash: BytesLike,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  depositERC721: TypedContractMethod<
    [
      tokenAddress: AddressLike,
      recipientSaltHash: BytesLike,
      tokenId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  depositNativeToken: TypedContractMethod<
    [recipientSaltHash: BytesLike],
    [void],
    "payable"
  >;

  getDepositData: TypedContractMethod<
    [depositId: BigNumberish],
    [DepositQueueLib.DepositDataStructOutput],
    "view"
  >;

  getDepositDataBatch: TypedContractMethod<
    [depositIds: BigNumberish[]],
    [DepositQueueLib.DepositDataStructOutput[]],
    "view"
  >;

  getDepositDataHash: TypedContractMethod<
    [depositId: BigNumberish],
    [string],
    "view"
  >;

  getLastDepositId: TypedContractMethod<[], [bigint], "view">;

  getLastRelayedDepositId: TypedContractMethod<[], [bigint], "view">;

  getNativeTokenIndex: TypedContractMethod<[], [bigint], "view">;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getTokenIndex: TypedContractMethod<
    [tokenType: BigNumberish, tokenAddress: AddressLike, tokenId: BigNumberish],
    [[boolean, bigint]],
    "view"
  >;

  getTokenInfo: TypedContractMethod<
    [tokenIndex: BigNumberish],
    [ITokenData.TokenInfoStructOutput],
    "view"
  >;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  initialize: TypedContractMethod<
    [
      _admin: AddressLike,
      _l1ScrollMessenger: AddressLike,
      _rollup: AddressLike,
      _withdrawal: AddressLike,
      _analyzer: AddressLike,
      _contribution: AddressLike,
      initialERC20Tokens: AddressLike[]
    ],
    [void],
    "nonpayable"
  >;

  isDepositValid: TypedContractMethod<
    [
      depositId: BigNumberish,
      recipientSaltHash: BytesLike,
      tokenIndex: BigNumberish,
      amount: BigNumberish,
      sender: AddressLike
    ],
    [boolean],
    "view"
  >;

  onERC1155Received: TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike
    ],
    [string],
    "view"
  >;

  processWithdrawals: TypedContractMethod<
    [
      withdrawals: WithdrawalLib.WithdrawalStruct[],
      withdrawalHashes: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ANALYZER"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "UPGRADE_INTERFACE_VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "analyzeAndRelayDeposits"
  ): TypedContractMethod<
    [
      upToDepositId: BigNumberish,
      rejectDepositIds: BigNumberish[],
      gasLimit: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "cancelDeposit"
  ): TypedContractMethod<
    [depositId: BigNumberish, deposit: DepositLib.DepositStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimWithdrawals"
  ): TypedContractMethod<
    [withdrawals: WithdrawalLib.WithdrawalStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimableWithdrawals"
  ): TypedContractMethod<[arg0: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "depositERC1155"
  ): TypedContractMethod<
    [
      tokenAddress: AddressLike,
      recipientSaltHash: BytesLike,
      tokenId: BigNumberish,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositERC20"
  ): TypedContractMethod<
    [
      tokenAddress: AddressLike,
      recipientSaltHash: BytesLike,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositERC721"
  ): TypedContractMethod<
    [
      tokenAddress: AddressLike,
      recipientSaltHash: BytesLike,
      tokenId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositNativeToken"
  ): TypedContractMethod<[recipientSaltHash: BytesLike], [void], "payable">;
  getFunction(
    nameOrSignature: "getDepositData"
  ): TypedContractMethod<
    [depositId: BigNumberish],
    [DepositQueueLib.DepositDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDepositDataBatch"
  ): TypedContractMethod<
    [depositIds: BigNumberish[]],
    [DepositQueueLib.DepositDataStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDepositDataHash"
  ): TypedContractMethod<[depositId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getLastDepositId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getLastRelayedDepositId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getNativeTokenIndex"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getTokenIndex"
  ): TypedContractMethod<
    [tokenType: BigNumberish, tokenAddress: AddressLike, tokenId: BigNumberish],
    [[boolean, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTokenInfo"
  ): TypedContractMethod<
    [tokenIndex: BigNumberish],
    [ITokenData.TokenInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _admin: AddressLike,
      _l1ScrollMessenger: AddressLike,
      _rollup: AddressLike,
      _withdrawal: AddressLike,
      _analyzer: AddressLike,
      _contribution: AddressLike,
      initialERC20Tokens: AddressLike[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isDepositValid"
  ): TypedContractMethod<
    [
      depositId: BigNumberish,
      recipientSaltHash: BytesLike,
      tokenIndex: BigNumberish,
      amount: BigNumberish,
      sender: AddressLike
    ],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "onERC1155Received"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike
    ],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "processWithdrawals"
  ): TypedContractMethod<
    [
      withdrawals: WithdrawalLib.WithdrawalStruct[],
      withdrawalHashes: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  getEvent(
    key: "ClaimedWithdrawal"
  ): TypedContractEvent<
    ClaimedWithdrawalEvent.InputTuple,
    ClaimedWithdrawalEvent.OutputTuple,
    ClaimedWithdrawalEvent.OutputObject
  >;
  getEvent(
    key: "DepositCanceled"
  ): TypedContractEvent<
    DepositCanceledEvent.InputTuple,
    DepositCanceledEvent.OutputTuple,
    DepositCanceledEvent.OutputObject
  >;
  getEvent(
    key: "Deposited"
  ): TypedContractEvent<
    DepositedEvent.InputTuple,
    DepositedEvent.OutputTuple,
    DepositedEvent.OutputObject
  >;
  getEvent(
    key: "DepositsAnalyzedAndRelayed"
  ): TypedContractEvent<
    DepositsAnalyzedAndRelayedEvent.InputTuple,
    DepositsAnalyzedAndRelayedEvent.OutputTuple,
    DepositsAnalyzedAndRelayedEvent.OutputObject
  >;
  getEvent(
    key: "DirectWithdrawalFailed"
  ): TypedContractEvent<
    DirectWithdrawalFailedEvent.InputTuple,
    DirectWithdrawalFailedEvent.OutputTuple,
    DirectWithdrawalFailedEvent.OutputObject
  >;
  getEvent(
    key: "DirectWithdrawalSuccessed"
  ): TypedContractEvent<
    DirectWithdrawalSuccessedEvent.InputTuple,
    DirectWithdrawalSuccessedEvent.OutputTuple,
    DirectWithdrawalSuccessedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawalClaimable"
  ): TypedContractEvent<
    WithdrawalClaimableEvent.InputTuple,
    WithdrawalClaimableEvent.OutputTuple,
    WithdrawalClaimableEvent.OutputObject
  >;

  filters: {
    "ClaimedWithdrawal(address,bytes32)": TypedContractEvent<
      ClaimedWithdrawalEvent.InputTuple,
      ClaimedWithdrawalEvent.OutputTuple,
      ClaimedWithdrawalEvent.OutputObject
    >;
    ClaimedWithdrawal: TypedContractEvent<
      ClaimedWithdrawalEvent.InputTuple,
      ClaimedWithdrawalEvent.OutputTuple,
      ClaimedWithdrawalEvent.OutputObject
    >;

    "DepositCanceled(uint256)": TypedContractEvent<
      DepositCanceledEvent.InputTuple,
      DepositCanceledEvent.OutputTuple,
      DepositCanceledEvent.OutputObject
    >;
    DepositCanceled: TypedContractEvent<
      DepositCanceledEvent.InputTuple,
      DepositCanceledEvent.OutputTuple,
      DepositCanceledEvent.OutputObject
    >;

    "Deposited(uint256,address,bytes32,uint32,uint256,uint256)": TypedContractEvent<
      DepositedEvent.InputTuple,
      DepositedEvent.OutputTuple,
      DepositedEvent.OutputObject
    >;
    Deposited: TypedContractEvent<
      DepositedEvent.InputTuple,
      DepositedEvent.OutputTuple,
      DepositedEvent.OutputObject
    >;

    "DepositsAnalyzedAndRelayed(uint256,uint256[],uint256,bytes)": TypedContractEvent<
      DepositsAnalyzedAndRelayedEvent.InputTuple,
      DepositsAnalyzedAndRelayedEvent.OutputTuple,
      DepositsAnalyzedAndRelayedEvent.OutputObject
    >;
    DepositsAnalyzedAndRelayed: TypedContractEvent<
      DepositsAnalyzedAndRelayedEvent.InputTuple,
      DepositsAnalyzedAndRelayedEvent.OutputTuple,
      DepositsAnalyzedAndRelayedEvent.OutputObject
    >;

    "DirectWithdrawalFailed(bytes32,tuple)": TypedContractEvent<
      DirectWithdrawalFailedEvent.InputTuple,
      DirectWithdrawalFailedEvent.OutputTuple,
      DirectWithdrawalFailedEvent.OutputObject
    >;
    DirectWithdrawalFailed: TypedContractEvent<
      DirectWithdrawalFailedEvent.InputTuple,
      DirectWithdrawalFailedEvent.OutputTuple,
      DirectWithdrawalFailedEvent.OutputObject
    >;

    "DirectWithdrawalSuccessed(bytes32,address)": TypedContractEvent<
      DirectWithdrawalSuccessedEvent.InputTuple,
      DirectWithdrawalSuccessedEvent.OutputTuple,
      DirectWithdrawalSuccessedEvent.OutputObject
    >;
    DirectWithdrawalSuccessed: TypedContractEvent<
      DirectWithdrawalSuccessedEvent.InputTuple,
      DirectWithdrawalSuccessedEvent.OutputTuple,
      DirectWithdrawalSuccessedEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;

    "WithdrawalClaimable(bytes32)": TypedContractEvent<
      WithdrawalClaimableEvent.InputTuple,
      WithdrawalClaimableEvent.OutputTuple,
      WithdrawalClaimableEvent.OutputObject
    >;
    WithdrawalClaimable: TypedContractEvent<
      WithdrawalClaimableEvent.InputTuple,
      WithdrawalClaimableEvent.OutputTuple,
      WithdrawalClaimableEvent.OutputObject
    >;
  };
}
