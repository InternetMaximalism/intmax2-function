/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  AddressLike,
  BaseContract,
  BigNumberish,
  BytesLike,
  ContractMethod,
  ContractRunner,
  EventFragment,
  FunctionFragment,
  Interface,
  Listener,
  Result,
} from "ethers";
import type {
  TypedContractEvent,
  TypedContractMethod,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedLogDescription,
} from "../../../common";

export interface MockL2ScrollMessengerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "_xDomainMessageSender"
      | "relayMessage"
      | "sendMessage(address,uint256,bytes,uint256,address)"
      | "sendMessage(address,uint256,bytes,uint256)"
      | "xDomainMessageSender",
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "FailedRelayedMessage"
      | "RelayedMessage"
      | "SentMessage"
      | "UpdateMaxFailedExecutionTimes",
  ): EventFragment;

  encodeFunctionData(functionFragment: "_xDomainMessageSender", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "relayMessage",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: "sendMessage(address,uint256,bytes,uint256,address)",
    values: [AddressLike, BigNumberish, BytesLike, BigNumberish, AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: "sendMessage(address,uint256,bytes,uint256)",
    values: [AddressLike, BigNumberish, BytesLike, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: "xDomainMessageSender", values?: undefined): string;

  decodeFunctionResult(functionFragment: "_xDomainMessageSender", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "relayMessage", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sendMessage(address,uint256,bytes,uint256,address)",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendMessage(address,uint256,bytes,uint256)",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "xDomainMessageSender", data: BytesLike): Result;
}

export namespace FailedRelayedMessageEvent {
  export type InputTuple = [messageHash: BytesLike];
  export type OutputTuple = [messageHash: string];
  export interface OutputObject {
    messageHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RelayedMessageEvent {
  export type InputTuple = [messageHash: BytesLike];
  export type OutputTuple = [messageHash: string];
  export interface OutputObject {
    messageHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SentMessageEvent {
  export type InputTuple = [
    sender: AddressLike,
    target: AddressLike,
    value: BigNumberish,
    messageNonce: BigNumberish,
    gasLimit: BigNumberish,
    message: BytesLike,
  ];
  export type OutputTuple = [
    sender: string,
    target: string,
    value: bigint,
    messageNonce: bigint,
    gasLimit: bigint,
    message: string,
  ];
  export interface OutputObject {
    sender: string;
    target: string;
    value: bigint;
    messageNonce: bigint;
    gasLimit: bigint;
    message: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateMaxFailedExecutionTimesEvent {
  export type InputTuple = [
    oldMaxFailedExecutionTimes: BigNumberish,
    newMaxFailedExecutionTimes: BigNumberish,
  ];
  export type OutputTuple = [
    oldMaxFailedExecutionTimes: bigint,
    newMaxFailedExecutionTimes: bigint,
  ];
  export interface OutputObject {
    oldMaxFailedExecutionTimes: bigint;
    newMaxFailedExecutionTimes: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MockL2ScrollMessenger extends BaseContract {
  connect(runner?: ContractRunner | null): MockL2ScrollMessenger;
  waitForDeployment(): Promise<this>;

  interface: MockL2ScrollMessengerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent,
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;

  _xDomainMessageSender: TypedContractMethod<[], [string], "view">;

  relayMessage: TypedContractMethod<
    [
      _from: AddressLike,
      _to: AddressLike,
      _value: BigNumberish,
      _nonce: BigNumberish,
      _message: BytesLike,
    ],
    [void],
    "nonpayable"
  >;

  "sendMessage(address,uint256,bytes,uint256,address)": TypedContractMethod<
    [
      _to: AddressLike,
      _value: BigNumberish,
      _message: BytesLike,
      _gasLimit: BigNumberish,
      arg4: AddressLike,
    ],
    [void],
    "payable"
  >;

  "sendMessage(address,uint256,bytes,uint256)": TypedContractMethod<
    [_to: AddressLike, _value: BigNumberish, _message: BytesLike, _gasLimit: BigNumberish],
    [void],
    "payable"
  >;

  xDomainMessageSender: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

  getFunction(nameOrSignature: "_xDomainMessageSender"): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "relayMessage",
  ): TypedContractMethod<
    [
      _from: AddressLike,
      _to: AddressLike,
      _value: BigNumberish,
      _nonce: BigNumberish,
      _message: BytesLike,
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sendMessage(address,uint256,bytes,uint256,address)",
  ): TypedContractMethod<
    [
      _to: AddressLike,
      _value: BigNumberish,
      _message: BytesLike,
      _gasLimit: BigNumberish,
      arg4: AddressLike,
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "sendMessage(address,uint256,bytes,uint256)",
  ): TypedContractMethod<
    [_to: AddressLike, _value: BigNumberish, _message: BytesLike, _gasLimit: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(nameOrSignature: "xDomainMessageSender"): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "FailedRelayedMessage",
  ): TypedContractEvent<
    FailedRelayedMessageEvent.InputTuple,
    FailedRelayedMessageEvent.OutputTuple,
    FailedRelayedMessageEvent.OutputObject
  >;
  getEvent(
    key: "RelayedMessage",
  ): TypedContractEvent<
    RelayedMessageEvent.InputTuple,
    RelayedMessageEvent.OutputTuple,
    RelayedMessageEvent.OutputObject
  >;
  getEvent(
    key: "SentMessage",
  ): TypedContractEvent<
    SentMessageEvent.InputTuple,
    SentMessageEvent.OutputTuple,
    SentMessageEvent.OutputObject
  >;
  getEvent(
    key: "UpdateMaxFailedExecutionTimes",
  ): TypedContractEvent<
    UpdateMaxFailedExecutionTimesEvent.InputTuple,
    UpdateMaxFailedExecutionTimesEvent.OutputTuple,
    UpdateMaxFailedExecutionTimesEvent.OutputObject
  >;

  filters: {
    "FailedRelayedMessage(bytes32)": TypedContractEvent<
      FailedRelayedMessageEvent.InputTuple,
      FailedRelayedMessageEvent.OutputTuple,
      FailedRelayedMessageEvent.OutputObject
    >;
    FailedRelayedMessage: TypedContractEvent<
      FailedRelayedMessageEvent.InputTuple,
      FailedRelayedMessageEvent.OutputTuple,
      FailedRelayedMessageEvent.OutputObject
    >;

    "RelayedMessage(bytes32)": TypedContractEvent<
      RelayedMessageEvent.InputTuple,
      RelayedMessageEvent.OutputTuple,
      RelayedMessageEvent.OutputObject
    >;
    RelayedMessage: TypedContractEvent<
      RelayedMessageEvent.InputTuple,
      RelayedMessageEvent.OutputTuple,
      RelayedMessageEvent.OutputObject
    >;

    "SentMessage(address,address,uint256,uint256,uint256,bytes)": TypedContractEvent<
      SentMessageEvent.InputTuple,
      SentMessageEvent.OutputTuple,
      SentMessageEvent.OutputObject
    >;
    SentMessage: TypedContractEvent<
      SentMessageEvent.InputTuple,
      SentMessageEvent.OutputTuple,
      SentMessageEvent.OutputObject
    >;

    "UpdateMaxFailedExecutionTimes(uint256,uint256)": TypedContractEvent<
      UpdateMaxFailedExecutionTimesEvent.InputTuple,
      UpdateMaxFailedExecutionTimesEvent.OutputTuple,
      UpdateMaxFailedExecutionTimesEvent.OutputObject
    >;
    UpdateMaxFailedExecutionTimes: TypedContractEvent<
      UpdateMaxFailedExecutionTimesEvent.InputTuple,
      UpdateMaxFailedExecutionTimesEvent.OutputTuple,
      UpdateMaxFailedExecutionTimesEvent.OutputObject
    >;
  };
}
